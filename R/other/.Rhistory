col_labels_vec <- gsub(x = col_labels_vec, pattern = "uv_", replacement = "UV_")
col_labels_vec <- gsub(x = col_labels_vec, pattern = "e2f_", replacement = "E2F_")
col_labels_vec <- gsub(x = col_labels_vec, pattern = "g2m_", replacement = "G2M_")
col_labels_vec <- gsub(x = col_labels_vec, pattern = "myc_", replacement = "MYC_")
col_labels_vec <- gsub(x = col_labels_vec, pattern = "il6_jak_stat3", replacement = "IL6-JAK-STAT3")
col_labels_vec <- gsub(x = col_labels_vec, pattern = "il2_stat5", replacement = "IL2-STAT5")
col_labels_vec <- gsub(x = col_labels_vec, pattern = "pi3k_akt_mtor", replacement = "PI3K-AKT-mTOR")
col_labels_vec <- gsub(x = col_labels_vec, pattern = "kras", replacement = "KRAS")
col_labels_vec[col_labels_vec == "tnfa_signaling_via_nfkb"] <- expression("TNF-alpha signaling via NFkB")
col_labels_vec <- gsub(x = col_labels_vec, pattern = "mtorc1", replacement = "mTORC1")
col_labels_vec <- gsub(x = col_labels_vec, pattern = "tgf_beta", replacement = "TGF-beta")
col_labels_vec <- gsub(x = col_labels_vec, pattern = "_", replacement = " ")
# make colors -------------------------------------------------------------
## make colors for the heatmap body
summary(as.vector(plotdata_mat))
# colors_sig_zscore = circlize::colorRamp2(breaks = c(-1.5, 0, seq(0.2, 1.8, 0.2)),
#                                       colors = c("blue", "white", RColorBrewer::brewer.pal(n = 9, name = "YlOrRd")))
colors_sig_zscore = circlize::colorRamp2(breaks = c(-2, 0, 2),
colors = c("purple", "black", "yellow"))
##
colors_correlation <- colorRamp2(c(-1, 0, 1), c("blue", "white", "red"))
# make row annotation -----------------------------------------------------
# consistency_vec <-  mapvalues(x = row_ids, from = sigCorr_df$gene_set, to = as.vector(sigCorr_df$C)); consistency_vec <- as.numeric(consistency_vec)
geneset_cat_vec <- mapvalues(x =  gsub(x = column_ids, replacement = "", pattern = "HALLMARK_"), from = hallmark_anno_df$`Hallmark Name`, to = as.vector(hallmark_anno_df$`Process Category`))
names(colors_geneset_cat) <- unique(geneset_cat_vec)
## save source data
write.table(x = plotdata_mat, file = "~/Desktop/S5e.SourceData.tsv", quote = F, sep = "\t", row.names = T)
View(plotdata_mat)
# Yige Wu @WashU Apr 2022
# set up libraries and output directory -----------------------------------
## set working directory
# dir_base = "~/Box/Ding_Lab/Projects_Current/RCC/ccRCC_snRNA/"
dir_base = "~/Library/CloudStorage/Box-Box/Ding_Lab/Projects_Current/RCC/ccRCC_snRNA"
setwd(dir_base)
packages = c(
"rstudioapi",
"plyr",
"dplyr",
"stringr",
"reshape2",
"data.table",
"ggplot2",
"ggpubr"
)
for (pkg_name_tmp in packages) {
library(package = pkg_name_tmp, character.only = T)
}
## set run id
version_tmp <- 1
run_id <- paste0(format(Sys.Date(), "%Y%m%d") , ".v", version_tmp)
## set output directory
source("./ccRCC_snRNA_analysis/functions.R")
dir_out <- paste0(makeOutDir(), run_id, "/")
dir.create(dir_out)
# input dependencies ------------------------------------------------------
## input median signature scores per cluster
results_mat <- readRDS(file = "./Resources/Analysis_Results/signature_scores/process_signature_scores/make_median_signature_scores_per_res1_cluster/20220427.v1/Median_signature_scores_per_res1_cluster.20220427.v1.RDS")
## input the gene set auto-correlation results as a measure of consistency
sigCorr_df <- fread(data.table = F, input = "./Resources/Analysis_Results/signature_scores/run_vision/getSignatureAutocorrelation_30ccRCC_tumorcellreclustered/20220411.v1/ccRCC.30ccRCC.TumorCellsReclustered.Vision.SignatureAutocorrelation.20220411.v1.tsv")
# make plot data -----------------------------------------------------------------
sigCorr_filtered_df <- sigCorr_df %>%
filter(grepl(pattern = "HALLMARK", x = gene_set)) %>%
filter(gene_set != "HALLMARK_UV_RESPONSE") %>%
filter(FDR < 0.05 & C > 0.1)
genesets_test <- sigCorr_filtered_df$gene_set
pairwise <- combn(genesets_test, 2)
pvalue_vec <- NULL
r_vec <- NULL
for (i in 1:ncol(pairwise)) {
geneset_x <- pairwise[1,i]
geneset_y <- pairwise[2,i]
plotdata_df <- data.frame(t(results_mat[c(geneset_x, geneset_y),]))
colnames(plotdata_df) <- c("x_plot", "y_plot")
plotdata_df$cluster <- rownames(plotdata_df)
# # plot --------------------------------------------------------------------
# p <- ggscatter(data = plotdata_df, x = "x_plot", y = "y_plot",
#                add = "reg.line",  # Add regressin line
#                label = "cluster", font.label = c(14, "plain"),
#                add.params = list(color = "grey", fill = "lightgray", linetype = 2)
# )
# p <- p + stat_cor(method = "pearson",
#                   label.x = min(plotdata_df$x_plot),
#                   label.y = (max(plotdata_df$y_plot)), size = 7)
# # p <- p + ggtitle(label = paste0(protein_tmp, "~", treatment_tmp, " 1-month response"))
# p <- p + theme_classic(base_size = 17)
# p <- p + xlab(paste0(geneset_x, " score"))
# p <- p + ylab(paste0(geneset_y, " score"))
# # p <- p + xlim(c(min(plotdata_tmp_df$x_plot)-0.11, max(plotdata_tmp_df$x_plot)+0.11))
# # p <- p + ylim(c(min(plotdata_tmp_df$y_plot)-0.05, max(plotdata_tmp_df$y_plot)+0.1))
# p <- p + theme(axis.text = element_text(color = "black"))
# file2write <- paste0(dir_out, geneset_x, ".vs.", geneset_y, ".png")
# png(file2write, width = 600, height = 600, res = 150)
# print(p)
# dev.off()
cor_res <- cor(x = plotdata_df$x_plot, y = plotdata_df$y_plot, method = "pearson")
pvalue_vec <- c(pvalue_vec, cor_res)
## write source data
write.table(x = plotdata_df, file = paste0("~/Desktop/SF5e.", geneset_x,".vs." , geneset_y, ".SourceData.tsv"), quote = F, sep = "\t", row.names = F)
}
pearson_result_df <- data.frame(t(pairwise))
colnames()
View(plotdata_df)
## write source data
write.table(x = plotdata_df, file = paste0("~/Desktop/SF5e.", geneset_x,".vs." , geneset_y, ".SourceData.tsv"), quote = F, sep = "\t", row.names = F)
pvalue_vec <- NULL
r_vec <- NULL
for (i in 1:ncol(pairwise)) {
geneset_x <- pairwise[1,i]
geneset_y <- pairwise[2,i]
plotdata_df <- data.frame(t(results_mat[c(geneset_x, geneset_y),]))
colnames(plotdata_df) <- c("x_plot", "y_plot")
plotdata_df$cluster <- rownames(plotdata_df)
# # plot --------------------------------------------------------------------
# p <- ggscatter(data = plotdata_df, x = "x_plot", y = "y_plot",
#                add = "reg.line",  # Add regressin line
#                label = "cluster", font.label = c(14, "plain"),
#                add.params = list(color = "grey", fill = "lightgray", linetype = 2)
# )
# p <- p + stat_cor(method = "pearson",
#                   label.x = min(plotdata_df$x_plot),
#                   label.y = (max(plotdata_df$y_plot)), size = 7)
# # p <- p + ggtitle(label = paste0(protein_tmp, "~", treatment_tmp, " 1-month response"))
# p <- p + theme_classic(base_size = 17)
# p <- p + xlab(paste0(geneset_x, " score"))
# p <- p + ylab(paste0(geneset_y, " score"))
# # p <- p + xlim(c(min(plotdata_tmp_df$x_plot)-0.11, max(plotdata_tmp_df$x_plot)+0.11))
# # p <- p + ylim(c(min(plotdata_tmp_df$y_plot)-0.05, max(plotdata_tmp_df$y_plot)+0.1))
# p <- p + theme(axis.text = element_text(color = "black"))
# file2write <- paste0(dir_out, geneset_x, ".vs.", geneset_y, ".png")
# png(file2write, width = 600, height = 600, res = 150)
# print(p)
# dev.off()
# cor_res <- cor(x = plotdata_df$x_plot, y = plotdata_df$y_plot, method = "pearson")
# pvalue_vec <- c(pvalue_vec, cor_res)
## write source data
write.table(x = plotdata_df, file = paste0("~/Desktop/SF5e.", geneset_x,".vs." , geneset_y, ".SourceData.tsv"), quote = F, sep = "\t", row.names = F)
}
genesets_test
genesets_test
View(genesets_test)
genesets_test <- c("HALLMARK_OXIDATIVE_PHOSPHORYLATION", "HALLMARK_GLYCOLYSIS", "HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION")
pairwise <- combn(genesets_test, 2)
pvalue_vec <- NULL
r_vec <- NULL
for (i in 1:ncol(pairwise)) {
geneset_x <- pairwise[1,i]
geneset_y <- pairwise[2,i]
plotdata_df <- data.frame(t(results_mat[c(geneset_x, geneset_y),]))
colnames(plotdata_df) <- c("x_plot", "y_plot")
plotdata_df$cluster <- rownames(plotdata_df)
# # plot --------------------------------------------------------------------
# p <- ggscatter(data = plotdata_df, x = "x_plot", y = "y_plot",
#                add = "reg.line",  # Add regressin line
#                label = "cluster", font.label = c(14, "plain"),
#                add.params = list(color = "grey", fill = "lightgray", linetype = 2)
# )
# p <- p + stat_cor(method = "pearson",
#                   label.x = min(plotdata_df$x_plot),
#                   label.y = (max(plotdata_df$y_plot)), size = 7)
# # p <- p + ggtitle(label = paste0(protein_tmp, "~", treatment_tmp, " 1-month response"))
# p <- p + theme_classic(base_size = 17)
# p <- p + xlab(paste0(geneset_x, " score"))
# p <- p + ylab(paste0(geneset_y, " score"))
# # p <- p + xlim(c(min(plotdata_tmp_df$x_plot)-0.11, max(plotdata_tmp_df$x_plot)+0.11))
# # p <- p + ylim(c(min(plotdata_tmp_df$y_plot)-0.05, max(plotdata_tmp_df$y_plot)+0.1))
# p <- p + theme(axis.text = element_text(color = "black"))
# file2write <- paste0(dir_out, geneset_x, ".vs.", geneset_y, ".png")
# png(file2write, width = 600, height = 600, res = 150)
# print(p)
# dev.off()
# cor_res <- cor(x = plotdata_df$x_plot, y = plotdata_df$y_plot, method = "pearson")
# pvalue_vec <- c(pvalue_vec, cor_res)
## write source data
write.table(x = plotdata_df, file = paste0("~/Desktop/SF5f.", geneset_x,".vs." , geneset_y, ".SourceData.tsv"), quote = F, sep = "\t", row.names = F)
}
## save source data
source_data_df <- rbind(plotdata_bed1, plotdata_bed2)
write.table(x = source_data_df, file = "~/Desktop/SF6b.SourceData.tsv", quote = F, sep = "\t", row.names = F)
## reference: https://www.cell.com/cell-stem-cell/pdf/S1934-5909(19)30166-3.pdf
## Fig. 6b
# set up libraries and output directory -----------------------------------
## set working directory
dir_base = "~/Box/Ding_Lab/Projects_Current/RCC/ccRCC_snRNA/"
setwd(dir_base)
source("./ccRCC_snRNA_analysis/load_pkgs.R")
## reference: https://www.cell.com/cell-stem-cell/pdf/S1934-5909(19)30166-3.pdf
## Fig. 6b
# set up libraries and output directory -----------------------------------
## set working directory
dir_base = "~/Library/CloudStorage/Box-Box/Ding_Lab/Projects_Current/RCC/ccRCC_snRNA"
setwd(dir_base)
packages = c(
"rstudioapi",
"plyr",
"dplyr",
"stringr",
"reshape2",
"data.table",
"ggplot2",
"circlize"
)
for (pkg_name_tmp in packages) {
if (!(pkg_name_tmp %in% installed.packages()[,1])) {
print(paste0(pkg_name_tmp, "is being installed!"))
BiocManager::install(pkgs = pkg_name_tmp, update = F)
install.packages(pkg_name_tmp, dependencies = T)
}
print(paste0(pkg_name_tmp, " is installed!"))
library(package = pkg_name_tmp, character.only = T)
}
## set run id
version_tmp <- 1
run_id <- paste0(format(Sys.Date(), "%Y%m%d") , ".v", version_tmp)
## set output directory
source("./ccRCC_snRNA_analysis/functions.R")
dir_out <- paste0(makeOutDir(), run_id, "/")
dir.create(dir_out)
# input dependencies ------------------------------------------------------
peaks_df <- fread(data.table = F, input = "./Resources/Analysis_Results/snatac/da_peaks/bap1/annotate_bap1_specific_daps/20210615.v1/BAP1_DAP2Gene.EnhancerPromoter.20210615.v1.tsv")
# set parameters ----------------------------------------------------------
cutoff_log2FC_snATAC <- 0.3
cutoff_log2FC_snRNA <- 0.3
# prepare plot data -------------------------------------------------------
plotdata_bed1 <- peaks_df %>%
filter(!is.na(avg_log2FC)) %>%
filter(DAP_direction == "Down") %>%
filter(avg_log2FC <= -cutoff_log2FC_snATAC) %>%
mutate(chr = str_split_fixed(string = peak, pattern = "\\-", n = 3)[,1]) %>%
mutate(start = as.numeric(str_split_fixed(string = peak, pattern = "\\-", n = 3)[,2])) %>%
mutate(end = as.numeric(str_split_fixed(string = peak, pattern = "\\-", n = 3)[,3])) %>%
mutate(value = ifelse(avg_log2FC < -1.5, -1.5, avg_log2FC)) %>%
select(chr, start, end, value)
plotdata_bed2 <- peaks_df %>%
filter(!is.na(avg_log2FC)) %>%
filter(DAP_direction == "Up") %>%
filter(avg_log2FC >= cutoff_log2FC_snATAC) %>%
mutate(chr = str_split_fixed(string = peak, pattern = "\\-", n = 3)[,1]) %>%
mutate(start = as.numeric(str_split_fixed(string = peak, pattern = "\\-", n = 3)[,2])) %>%
mutate(end = as.numeric(str_split_fixed(string = peak, pattern = "\\-", n = 3)[,3])) %>%
mutate(value = ifelse(avg_log2FC > 1.5, 1.5, avg_log2FC)) %>%
select(chr, start, end, value)
bed_list = list(plotdata_bed1, plotdata_bed2)
# plot version 1 --------------------------------------------------------------------
## initialize
file2write <- paste0(dir_out, "BAP1_specific_peaks.pdf")
pdf(file2write, width = 6, height = 6, useDingbats = F)
circos.par(gap.degree = c(rep(1, 23), 30), start.degree = 90)
circos.initializeWithIdeogram(plotType = c("ideogram", "labels"), labels.cex = 1.2)
# circos.initializeWithIdeogram(plotType = c("axis", "labels"))
## plot track
circos.genomicTrack(bed_list,
panel.fun = function(region, value, ...) {
i = getI(...)
color_i <- c("#377EB8", "#E41A1C")[i]
circos.genomicPoints(region, value, pch = 16, cex = 0.3, col = color_i, ...)
}, track.height = 0.2)
circos.yaxis(side = "left", sector.index = "chr1", labels.cex = 1.2, at = c(-1.5, 0, 1.5))
## add density
# circos.genomicDensity(bed_list, col = c("#377EB8", "#E41A1C"), track.height = 0.2, overlap = F)
circos.genomicDensity(bed_list[[1]], col = c("#377EB8"), track.height = 0.2)
circos.genomicDensity(bed_list[[2]], col = c("#E41A1C"), track.height = 0.2)
circos.clear()
dev.off()
## save source data
source_data_df <- rbind(plotdata_bed1, plotdata_bed2)
write.table(x = source_data_df, file = "~/Desktop/SF6b.SourceData.tsv", quote = F, sep = "\t", row.names = F)
# Yige Wu @WashU Jun 2021
# set up libraries and output directory -----------------------------------
## set working directory
dir_base = "~/Library/CloudStorage/Box-Box/Ding_Lab/Projects_Current/RCC/ccRCC_snRNA"
setwd(dir_base)
packages = c(
"rstudioapi",
"plyr",
"dplyr",
"stringr",
"reshape2",
"data.table",
"ggplot2",
"circlize"
)
for (pkg_name_tmp in packages) {
if (!(pkg_name_tmp %in% installed.packages()[,1])) {
print(paste0(pkg_name_tmp, "is being installed!"))
BiocManager::install(pkgs = pkg_name_tmp, update = F)
install.packages(pkg_name_tmp, dependencies = T)
}
print(paste0(pkg_name_tmp, " is installed!"))
library(package = pkg_name_tmp, character.only = T)
}
## set run id
version_tmp <- 1
run_id <- paste0(format(Sys.Date(), "%Y%m%d") , ".v", version_tmp)
## set output directory
source("./ccRCC_snRNA_analysis/functions.R")
dir_out <- paste0(makeOutDir(), run_id, "/")
dir.create(dir_out)
# input dependencies ------------------------------------------------------
peaks2degs_df <- fread(data.table = F, input = "./Resources/Analysis_Results/snatac/da_peaks/pbrm1/overlap_degs/overlap_pbrm1_vs_nonmutant_enhancer_promoter_peaks_28samples_with_degs/20211011.v1/PBRM1_vs_NonMutant_DAP2DEG.20211011.v1.tsv")
# input dependencies ------------------------------------------------------
peaks2degs_df <- fread(data.table = F, input = "./Resources/Analysis_Results/snatac/da_peaks/pbrm1/overlap_degs/overlap_pbrm1_vs_nonmutant_enhancer_promoter_peaks_28samples_with_degs/20211011.v1/PBRM1_vs_NonMutant_DAP2DEG.20211011.v1.tsv")
# Yige Wu @WashU Aug 2020
## 2020-09-03 removed the silent mutations
## 2020-09-09 make the non-SMG mutations more transparent
# set up libraries and output directory -----------------------------------
## set working directory
dir_base = "~/Library/CloudStorage/Box-Box/Ding_Lab/Projects_Current/RCC/ccRCC_snRNA"
setwd(dir_base)
source("./ccRCC_snRNA_analysis/load_pkgs.R")
source("./ccRCC_snRNA_analysis/functions.R")
source("./ccRCC_snRNA_analysis/variables.R")
source("./ccRCC_snRNA_analysis/plotting.R")
library(ggrastr)
## set run id
version_tmp <- 1
run_id <- paste0(format(Sys.Date(), "%Y%m%d") , ".v", version_tmp)
## set output directory
dir_out <- paste0(makeOutDir(), run_id, "/")
dir.create(dir_out)
# input dependencies ------------------------------------------------------
## set 10XMapping processing run id to input !0XMapping result later
mut_mapping_run_id <- "20200219.v1"
## input id meta data table
# idmetadata_df <- fread(data.table = F, input = "./Resources/Analysis_Results/sample_info/make_meta_data/20200716.v1/meta_data.20200716.v1.tsv")
idmetadata_df <- fread(data.table = F, input = "./Resources/Analysis_Results/sample_info/make_meta_data/20210423.v1/meta_data.20210423.v1.tsv")
## input 10xmapping result
snRNA_mutation_df <- fread("./Resources/Analysis_Results/mutation/unite_10xmapping/20200303.v1/10XMapping.20200303.v1.tsv", data.table = F)
## input umap data
umap_df <- fread(data.table = F, input = "./Resources/Analysis_Results/fetch_data/fetchdata_individual_tumorcellreclustered_on_katmai/20201127.v1/MetaData_TumorCellOnlyReclustered.20201127.v1.tsv")
# remove the silent mutations ---------------------------------------------
snRNA_mutation_df <- snRNA_mutation_df %>%
mutate(AA_Change = str_split_fixed(string = mutation, pattern = "-", n = 3)[,2]) %>%
mutate(Ref_Allele = str_split_fixed(string = AA_Change, pattern = '[0-9]', n = 2)[,1])
snRNA_mutation_df$Alt_Allele <- sapply(X = snRNA_mutation_df$AA_Change, FUN = function(x) {
text_vec <- str_split(string = x, pattern = '[0-9]')[[1]]
return(text_vec[length(text_vec)])
})
snRNA_mutation_df <- snRNA_mutation_df %>%
mutate(Is_Silent = (Alt_Allele == Ref_Allele))
snRNA_mutation_df$easy_id <- mapvalues(x = snRNA_mutation_df$aliquot, from = idmetadata_df$Aliquot.snRNA, to = as.vector(idmetadata_df$Aliquot.snRNA.WU))
# remove the sample without mutation mapping result -----------------------
umap_df <- umap_df %>%
filter(aliquot != "CPT0000890002")
View(umap_df)
# Yige Wu @WashU Aug 2020
## 2020-09-03 removed the silent mutations
## 2020-09-09 make the non-SMG mutations more transparent
# set up libraries and output directory -----------------------------------
## set working directory
dir_base = "~/Library/CloudStorage/Box-Box/Ding_Lab/Projects_Current/RCC/ccRCC_snRNA"
setwd(dir_base)
source("./ccRCC_snRNA_analysis/load_pkgs.R")
source("./ccRCC_snRNA_analysis/functions.R")
source("./ccRCC_snRNA_analysis/variables.R")
source("./ccRCC_snRNA_analysis/plotting.R")
library(ggrastr)
## set run id
version_tmp <- 1
run_id <- paste0(format(Sys.Date(), "%Y%m%d") , ".v", version_tmp)
## set output directory
dir_out <- paste0(makeOutDir(), run_id, "/")
dir.create(dir_out)
# input dependencies ------------------------------------------------------
## set 10XMapping processing run id to input !0XMapping result later
mut_mapping_run_id <- "20200219.v1"
## input id meta data table
# idmetadata_df <- fread(data.table = F, input = "./Resources/Analysis_Results/sample_info/make_meta_data/20200716.v1/meta_data.20200716.v1.tsv")
idmetadata_df <- fread(data.table = F, input = "./Resources/Analysis_Results/sample_info/make_meta_data/20210423.v1/meta_data.20210423.v1.tsv")
## input 10xmapping result
snRNA_mutation_df <- fread("./Resources/Analysis_Results/mutation/unite_10xmapping/20200303.v1/10XMapping.20200303.v1.tsv", data.table = F)
## input umap data
umap_df <- fread(data.table = F, input = "./Resources/Analysis_Results/fetch_data/fetchdata_individual_tumorcellreclustered_on_katmai/20201127.v1/MetaData_TumorCellOnlyReclustered.20201127.v1.tsv")
# remove the silent mutations ---------------------------------------------
snRNA_mutation_df <- snRNA_mutation_df %>%
mutate(AA_Change = str_split_fixed(string = mutation, pattern = "-", n = 3)[,2]) %>%
mutate(Ref_Allele = str_split_fixed(string = AA_Change, pattern = '[0-9]', n = 2)[,1])
snRNA_mutation_df$Alt_Allele <- sapply(X = snRNA_mutation_df$AA_Change, FUN = function(x) {
text_vec <- str_split(string = x, pattern = '[0-9]')[[1]]
return(text_vec[length(text_vec)])
})
snRNA_mutation_df <- snRNA_mutation_df %>%
mutate(Is_Silent = (Alt_Allele == Ref_Allele))
snRNA_mutation_df$easy_id <- mapvalues(x = snRNA_mutation_df$aliquot, from = idmetadata_df$Aliquot.snRNA, to = as.vector(idmetadata_df$Aliquot.snRNA.WU))
# remove the sample without mutation mapping result -----------------------
umap_df <- umap_df %>%
filter(orig.ident != "CPT0000890002")
aliquot2process <- idmetadata_df$Aliquot.snRNA[idmetadata_df$snRNA_available & idmetadata_df$Sample_Type == "Tumor"]
# plot  by sample --------------------------------------------------
for (snRNA_aliquot_id_tmp in aliquot2process) {
aliquot_show <- idmetadata_df$Aliquot.snRNA.WU[idmetadata_df$Aliquot.snRNA == snRNA_aliquot_id_tmp]
## input barcodes with mapped varaint alleles and reference alleles
mutation_map_tab.var <- snRNA_mutation_df %>%
filter(aliquot == snRNA_aliquot_id_tmp) %>%
filter(Is_Silent == F) %>%
filter(allele_type == "Var")
if (snRNA_aliquot_id_tmp == "CPT0001260013") {
mutation_map_tab.var <- mutation_map_tab.var %>%
filter(gene_symbol != "FTH1")
}
mutation_map_tab.ref <- snRNA_mutation_df %>%
filter(aliquot == snRNA_aliquot_id_tmp) %>%
filter(Is_Silent == F) %>%
filter(gene_symbol %in% mutation_map_tab.var$gene_symbol) %>%
filter(allele_type == "Ref")
## make data frame for plotting
plot_data_df <- umap_df %>%
filter(orig.ident == snRNA_aliquot_id_tmp) %>%
rename(barcode = barcode_tumorcellreclustered)
## merge with variant read info
plot_data_df <- merge(plot_data_df, mutation_map_tab.var, by = c("barcode"), all.x = T)
### create read type, distinguish variant allele and reference allele
plot_data_df$read_type <- "others"
plot_data_df$read_type[plot_data_df$barcode %in% mutation_map_tab.var$barcode] <- "cells with the variant read(s)"
table(plot_data_df$read_type)
### order the data frame so that cells mapped with variant allele will come on top
plot_data_df <- rbind(plot_data_df[plot_data_df$read_type == "others",],
plot_data_df[plot_data_df$read_type == "cells with the variant read(s)",])
## add a column for drive genes
plot_data_df <- plot_data_df %>%
mutate(celltype_plot = ifelse(is.na(gene_symbol), "others",
ifelse(gene_symbol %in% ccRCC_SMGs, "cells with the SMG mutation(s)", "others"))) %>%
mutate(label_plot = ifelse(gene_symbol %in% ccRCC_SMGs, gene_symbol, NA))
## make color palette for different read types
colors_celltype <- c("#E31A1C", "grey70")
names(colors_celltype) <- c("cells with the SMG mutation(s)", "others")
## ggplot
p <- ggplot(data = plot_data_df, mapping = aes(x = UMAP_1, y = UMAP_2, color = celltype_plot, label = label_plot))
p <- p + geom_point_rast(alpha = 0.8, size = 0.5)
p <- p + geom_text_repel(max.overlaps = Inf, min.segment.length = 0, box.padding = 0.5, size = 8, segment.alpha = 0.5, segment.size = 0.2)
p <- p + scale_color_manual(values = colors_celltype)
p <- p + ggtitle(paste0(aliquot_show))
p <- p + theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p <- p + theme(legend.position = "none")
p <- p + theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
title = element_text(size = 20))
file2write <- paste0(dir_out, aliquot_show, ".mut.pdf")
pdf(file2write, width = 4, height = 4, useDingbats = F)
print(p)
dev.off()
## save source data
source_data_df <- plot_data_df %>%
select(UMAP_1, UMAP_2, celltype_plot, label_plot)
write.table(x = source_data_df, file = paste0("~/Desktop/SF7.", aliquot_show, ".SourceData.tsv"), quote = T, sep = "\t", row.names = F)
}
dir_sourcedatafiles <- "~/Documents/Project/ccRCC_snRNA/Source_Data/Individual_Source_Data/"
# Manuscript:   Epigenetic and transcriptomic characterization reveals progression markers and essential pathways in clear cell renal cell carcinoma
# Author:       Yige Wu
# Description:  make source data excel sheet
#=======================================================================================
# Load libraries  and set working directory  -----------------------------------
## load libraries
packages = c(
"data.table",
"stringr",
"plyr",
"dplyr",
"xlsx",
"openxlsx"
)
for (pkg_name_tmp in packages) {
if (!(pkg_name_tmp %in% installed.packages()[,1])) {
install.packages(pkg_name_tmp, dependencies = T)
}
if (!(pkg_name_tmp %in% installed.packages()[,1])) {
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install(pkg_name_tmp)
}
library(package = pkg_name_tmp, character.only = T)
}
## set working directory to current file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# get all file names ------------------------------------------------------
library(xlsx)
# xlsx_filename <- "../../../202301_Nat_Comm/Source_Data/Source_Data.nonWB.020223.xlsx"
xlsx_filename <- "~/Documents/Project/ccRCC_snRNA/Source_Data/Source_Data.nonWB.020423.xlsx"
dir_sourcedatafiles <- "~/Documents/Project/ccRCC_snRNA/Source_Data/Individual_Source_Data/"
# filenames_process <- list.files(path = "../../plot_data/")
filenames_process <- list.files(path = dir_sourcedatafiles)
# Create a blank workbook
OUT <- createWorkbook()
for (filename_tmp in filenames_process) {
dataframe_tmp <- fread(data.table = F, input = paste0(dir_sourcedatafiles, filename_tmp))
sheetname_tmp <- gsub(x = filename_tmp, pattern = "\\.SourceData\\.tsv", replacement = "")
# Add some sheets to the workbook
addWorksheet(OUT, sheetname_tmp)
# Write the data to the sheets
writeData(OUT, sheet = sheetname_tmp, x = dataframe_tmp)
# write.xlsx(dataframe_tmp, file = xlsx_filename, sheetName = sheetname_tmp, append=TRUE, row.names=FALSE)
}
xlsx_filename <- "~/Documents/Project/ccRCC_snRNA/Source_Data/Source_Data.nonWB.020423.xlsx"
dir_sourcedatafiles <- "~/Documents/Project/ccRCC_snRNA/Source_Data/Individual_Source_Data/"
# filenames_process <- list.files(path = "../../plot_data/")
filenames_process <- list.files(path = dir_sourcedatafiles)
# Create a blank workbook
OUT <- createWorkbook()
for (filename_tmp in filenames_process) {
dataframe_tmp <- fread(data.table = F, input = paste0(dir_sourcedatafiles, filename_tmp))
sheetname_tmp <- gsub(x = filename_tmp, pattern = "\\.SourceData\\.tsv", replacement = "")
# Add some sheets to the workbook
addWorksheet(OUT, sheetname_tmp)
# Write the data to the sheets
writeData(OUT, sheet = sheetname_tmp, x = dataframe_tmp)
# write.xlsx(dataframe_tmp, file = xlsx_filename, sheetName = sheetname_tmp, append=TRUE, row.names=FALSE)
}
# Export the file
saveWorkbook(OUT, xlsx_filename)
