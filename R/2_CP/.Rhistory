if (!(pkg_name_tmp %in% installed.packages()[,1])) {
install.packages(pkg_name_tmp, dependencies = T)
}
if (!(pkg_name_tmp %in% installed.packages()[,1])) {
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install(pkg_name_tmp)
}
library(package = pkg_name_tmp, character.only = T)
}
p <- ggscatter(data = plotdata_df, x = "avg_log2FC.snATAC", y = "avg_log2FC.snRNA", color = "peak2gene_type", alpha = 0.8, shape = 16, size = 2.5,
add = "reg.line", add.params = list(color = "grey50", linetype = 2), # Customize reg. line
conf.int = F # Add confidence interval
)
p <- p + geom_vline(xintercept = 0, linetype = 2, color = "grey")
p <- p + geom_hline(yintercept = 0, linetype = 2, color = "grey")
# p <- p + stat_cor(method = "pearson", label.x = 0, label.y = 0, size = 4)
p <- p + geom_text_repel(data = subset(x = plotdata_df, highlight == T),
mapping = aes(x = avg_log2FC.snATAC, y = avg_log2FC.snRNA, label = Gene),
max.overlaps = Inf, size = 6,
segment.size = 0.4, segment.alpha = 0.6, min.segment.length = 0, box.padding = 0.5)
p <-  p + scale_color_manual(values = colors_peak2genetype)
p <- p + guides(color = guide_legend(nrow = 1, override.aes = aes(size = 3), label.theme = element_text(size = 14)))
p <- p + theme(axis.text = element_text(size = 18, color = "black"),
axis.title = element_text(size = 14),
legend.position = "bottom", legend.box = "horizontal")
# write output ------------------------------------------------------------
dir_out <- paste0("../../outputs/"); dir.create(dir_out)
file2write <- paste0(dir_out, "F7a_Volcanoplot_BAP1_DEgs", ".pdf")
pdf(file2write, width = 5.5, height = 6, useDingbats = F)
print(p)
dev.off()
View(plotdata_df)
# Load libraries  and set working directory  -----------------------------------
## load libraries
packages = c(
"plyr",
"dplyr",
"stringr",
"reshape2",
"data.table",
"ggplot2",
"ggpubr",
"ggrepel",
"RColorBrewer"
)
for (pkg_name_tmp in packages) {
if (!(pkg_name_tmp %in% installed.packages()[,1])) {
install.packages(pkg_name_tmp, dependencies = T)
}
if (!(pkg_name_tmp %in% installed.packages()[,1])) {
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install(pkg_name_tmp)
}
library(package = pkg_name_tmp, character.only = T)
}
p <- ggscatter(data = plotdata_df, x = "avg_log2FC.snATAC", y = "avg_log2FC.snRNA", color = "peak2gene_type", alpha = 0.8, shape = 16, size = 2.5,
add = "reg.line", add.params = list(color = "grey50", linetype = 2), # Customize reg. line
conf.int = F # Add confidence interval
)
p <- p + geom_vline(xintercept = 0, linetype = 2, color = "grey")
p <- p + geom_hline(yintercept = 0, linetype = 2, color = "grey")
# p <- p + stat_cor(method = "pearson", label.x = 0, label.y = 0, size = 4)
p <- p + geom_text_repel(data = subset(x = plotdata_df, highlight == T),
mapping = aes(x = avg_log2FC.snATAC, y = avg_log2FC.snRNA, label = Gene),
max.overlaps = Inf, size = 6,
segment.size = 0.4, segment.alpha = 0.6, min.segment.length = 0, box.padding = 0.5)
p <-  p + scale_color_manual(values = colors_peak2genetype)
p <- p + guides(color = guide_legend(nrow = 1, override.aes = aes(size = 3), label.theme = element_text(size = 14)))
p <- p + theme(axis.text = element_text(size = 18, color = "black"),
axis.title = element_text(size = 14),
legend.position = "bottom", legend.box = "horizontal")
# write output ------------------------------------------------------------
dir_out <- paste0("../../outputs/"); dir.create(dir_out)
file2write <- paste0(dir_out, "F7a_Volcanoplot_BAP1_DEgs", ".pdf")
pdf(file2write, width = 5.5, height = 6, useDingbats = F)
print(p)
dev.off()
dap2deg_df <- fread(data.table = F, input = "../../data/BAP1_vs_NonMutant_DAP2DEG.20210913.v1.tsv")
dap2deg_df <- fread(data.table = F, input = "../../data/BAP1_vs_NonMutant_DAP2DEG.20211011.v1.tsv.gz")
# input -------------------------------------------------------------------
ora_result_df1 <- fread(data.table = F, input = "../../data/ORA_Results.BAP1_vs_nonmutants.down_degs_overlaps_promoter_enhancer_dap.tsv")
ora_result_df2 <- fread(data.table = F, input = "../../data/ORA_Results.BAP1_vs_nonmutants.up_degs_overlaps_promoter_enhancer_dap.tsv")
# select gene sets --------------------------------------------------------
enricher_filtered_df <- ora_result_df1 %>%
filter(pvalue < 0.05) %>%
filter(Count >= 2) %>%
mutate(row_id = ID)
# set plotting parameters -------------------------------------------------
genesets_plot <- c("KEGG_ADHERENS_JUNCTION", "REACTOME_RHOA_GTPASE_CYCLE", "KEGG_GLYOXYLATE_AND_DICARBOXYLATE_METABOLISM", "WP_WNT_SIGNALING",
"HALLMARK_KRAS_SIGNALING_DN", "HALLMARK_P53_PATHWAY", "REACTOME_BIOLOGICAL_OXIDATIONS", "HALLMARK_ESTROGEN_RESPONSE_EARLY",
"REACTOME_TNFS_BIND_THEIR_PHYSIOLOGICAL_RECEPTORS", "WP_AMINO_ACID_METABOLISM", "WP_NUCLEAR_RECEPTORS_METAPATHWAY",
"WP_PATHWAYS_IN_CLEAR_CELL_RENAL_CELL_CARCINOMA", "REACTOME_EPHA_MEDIATED_GROWTH_CONE_COLLAPSE",
"WP_BRAINDERIVED_NEUROTROPHIC_FACTOR_BDNF_SIGNALING_PATHWAY", "HALLMARK_HEME_METABOLISM")
# process -----------------------------------------------------------------
ora_result_df <- rbind(ora_result_df1, ora_result_df2)
ora_filtered_df <- ora_result_df %>%
filter(ID %in% genesets_plot)
genes_list <- sapply(ora_filtered_df$geneID, function(genes_string) {
genes_vec <- str_split(string = genes_string, pattern = "\\/")[[1]]
return(genes_vec)
})
genenumber_vec <- sapply(ora_filtered_df$geneID, function(genes_string) {
genes_vec <- str_split(string = genes_string, pattern = "\\/")[[1]]
return(length(genes_vec))
})
names(genes_list) <- ora_filtered_df$ID
gene2geneset_long_df <- data.frame(genesymbol = unlist(genes_list), geneset = rep(ora_filtered_df$ID, genenumber_vec))
gene2geneset_long_df$avg_log2FC.snRNA <- mapvalues(x = gene2geneset_long_df$genesymbol, from = dap2deg_df$Gene, to = as.vector(dap2deg_df$avg_log2FC.snRNA))
gene2geneset_long_df$avg_log2FC.snRNA <- as.numeric(gene2geneset_long_df$avg_log2FC.snRNA)
# make heatmap data -------------------------------------------------------
gene2geneset_wide_df <- dcast(data = gene2geneset_long_df, geneset ~ genesymbol, value.var = "avg_log2FC.snRNA")
plotdata_mat <- as.matrix(gene2geneset_wide_df[,-1])
rownames(plotdata_mat) <- gene2geneset_wide_df$geneset
plotdata_mat[is.na(plotdata_mat)] <- 0
# make colors -------------------------------------------------------------
color_blue <- RColorBrewer::brewer.pal(n = 3, name = "Set1")[2]
color_red <- RColorBrewer::brewer.pal(n = 3, name = "Set1")[1]
summary(as.vector(plotdata_mat))
colors_heatmapbody = colorRamp2(c(-1, 0, 1), c("purple", "grey20", "yellow"))
colors_heatmapbody = colorRamp2(c(-1, 0, 1), c(color_blue, "white", color_red))
fontsize_plot <- 18
list_lgd = packLegend(
Legend(col_fun = colors_heatmapbody,
title = "log2 fold change\nBAP1-mutants vs. non-mutants",
title_gp = gpar(fontsize = fontsize_plot),
labels_gp = gpar(fontsize = fontsize_plot),
legend_width = unit(4, "cm"),
legend_height = unit(4, "cm"),
direction = "horizontal"))
# plot --------------------------------------------------------------------
p <- ComplexHeatmap::Heatmap(matrix = plotdata_mat, col = colors_heatmapbody,
cluster_columns = T, show_column_dend = F, column_names_gp = gpar(fontsize = fontsize_plot, fontface = "italic"),
cluster_rows = T, show_row_dend = F, row_names_side = "left", row_names_gp = gpar(fontsize = fontsize_plot),
show_heatmap_legend = F)
file2write <- paste0(dir_out, "heatmap", ".pdf")
roworder_plot <- rownames(plotdata_mat)[rev(row_order(p))]
columnorder_plot <- colnames(plotdata_mat)[rev(column_order(p))]
# Load libraries  and set working directory  -----------------------------------
## load libraries
packages = c(
"plyr",
"dplyr",
"stringr",
"reshape2",
"data.table",
"ComplexHeatmap",
"circlize",
"RColorBrewer"
)
for (pkg_name_tmp in packages) {
if (!(pkg_name_tmp %in% installed.packages()[,1])) {
install.packages(pkg_name_tmp, dependencies = T)
}
if (!(pkg_name_tmp %in% installed.packages()[,1])) {
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install(pkg_name_tmp)
}
library(package = pkg_name_tmp, character.only = T)
}
# plot --------------------------------------------------------------------
p <- ComplexHeatmap::Heatmap(matrix = plotdata_mat, col = colors_heatmapbody,
cluster_columns = T, show_column_dend = F, column_names_gp = gpar(fontsize = fontsize_plot, fontface = "italic"),
cluster_rows = T, show_row_dend = F, row_names_side = "left", row_names_gp = gpar(fontsize = fontsize_plot),
show_heatmap_legend = F)
roworder_plot <- rownames(plotdata_mat)[rev(row_order(p))]
columnorder_plot <- colnames(plotdata_mat)[rev(column_order(p))]
plotdata_mat2 <- plotdata_mat[roworder_plot, columnorder_plot]
rowlabels_plot <- str_split_fixed(string = roworder_plot, pattern = "_", n = 2)[,2]
rowlabels_plot[rowlabels_plot == "BRAINDERIVED_NEUROTROPHIC_FACTOR_BDNF_SIGNALING_PATHWAY"] <- "BDNF_SIGNALING_PATHWAY"
# plot --------------------------------------------------------------------
p <- ComplexHeatmap::Heatmap(matrix = plotdata_mat, col = colors_heatmapbody,
cluster_columns = T, show_column_dend = F, column_names_gp = gpar(fontsize = fontsize_plot, fontface = "italic"),
cluster_rows = T, show_row_dend = F, row_names_side = "left", row_names_gp = gpar(fontsize = fontsize_plot),
show_heatmap_legend = F)
roworder_plot <- rownames(plotdata_mat)[rev(row_order(p))]
columnorder_plot <- colnames(plotdata_mat)[rev(column_order(p))]
plotdata_mat2 <- plotdata_mat[roworder_plot, columnorder_plot]
rowlabels_plot <- str_split_fixed(string = roworder_plot, pattern = "_", n = 2)[,2]
rowlabels_plot[rowlabels_plot == "BRAINDERIVED_NEUROTROPHIC_FACTOR_BDNF_SIGNALING_PATHWAY"] <- "BDNF_SIGNALING_PATHWAY"
rowlabels_plot[rowlabels_plot == "PATHWAYS_IN_CLEAR_CELL_RENAL_CELL_CARCINOMA"] <- "PATHWAY in ccRCC"
p2 <- ComplexHeatmap::Heatmap(matrix = plotdata_mat2, col = colors_heatmapbody,
cluster_columns = F,  column_names_gp = gpar(fontsize = fontsize_plot, fontface = "italic"),
cluster_rows = F, row_names_side = "left", row_names_gp = gpar(fontsize = fontsize_plot), row_labels = rowlabels_plot,
show_heatmap_legend = F)
dir_out <- paste0("../../outputs/"); dir.create(dir_out)
file2write <- paste0(dir_out, "F7c_Heatmap_Pathway_associated_BAP1_DEG_overlapping_DAP", ".pdf")
pdf(file2write, width = 13, height = 6.6, useDingbats = F)
draw(object = p2,
annotation_legend_side = "bottom", annotation_legend_list = list_lgd)
dev.off()
list_lgd = packLegend(
Legend(col_fun = colors_heatmapbody,
title = "log2 fold change\nBAP1-mutants vs. non-mutants",
title_gp = gpar(fontsize = fontsize_plot),
labels_gp = gpar(fontsize = fontsize_plot),
legend_width = unit(4, "cm"),
legend_height = unit(4, "cm"),
direction = "horizontal"))
file2write <- paste0(dir_out, "F7c_Heatmap_Pathway_associated_BAP1_DEG_overlapping_DAP", ".pdf")
pdf(file2write, width = 13, height = 6.6, useDingbats = F)
draw(object = p2,
annotation_legend_side = "bottom", annotation_legend_list = list_lgd)
dev.off()
# Load libraries  and set working directory  -----------------------------------
## load libraries
packages = c(
"plyr",
"dplyr",
"stringr",
"reshape2",
"data.table",
"ggplot2",
"RColorBrewer"
)
# input -------------------------------------------------------------------
exp_df <- fread(input = "../../data/CPM.TMM_normalized.All_Cell_Lines.20220606.v1.tsv", data.table = F)
# Load libraries  and set working directory  -----------------------------------
## load libraries
packages = c(
"plyr",
"dplyr",
"stringr",
"reshape2",
"data.table",
"ggplot2",
"RColorBrewer"
)
for (pkg_name_tmp in packages) {
if (!(pkg_name_tmp %in% installed.packages()[,1])) {
install.packages(pkg_name_tmp, dependencies = T)
}
if (!(pkg_name_tmp %in% installed.packages()[,1])) {
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install(pkg_name_tmp)
}
library(package = pkg_name_tmp, character.only = T)
}
# input -------------------------------------------------------------------
exp_df <- fread(input = "../../data/CPM.TMM_normalized.All_Cell_Lines.20220606.v1.tsv", data.table = F)
# input dependencies ------------------------------------------------------
exp_df <- fread(input = "../../data/CPM.TMM_normalized.All_Cell_Lines.20220606.v1.tsv.gz", data.table = F)
dir_base = "~/Library/CloudStorage/Box-Box/Ding_Lab/Projects_Current/RCC/ccRCC_snRNA"
setwd(dir_base)
packages = c(
"rstudioapi",
"plyr",
"dplyr",
"stringr",
"reshape2",
"data.table",
"edgeR"
)
for (pkg_name_tmp in packages) {
if (!(pkg_name_tmp %in% installed.packages()[,1])) {
print(paste0(pkg_name_tmp, "is being installed!"))
BiocManager::install(pkgs = pkg_name_tmp, update = F)
install.packages(pkg_name_tmp, dependencies = T)
}
print(paste0(pkg_name_tmp, " is installed!"))
library(package = pkg_name_tmp, character.only = T)
}
# input ------------------------------------------------------
counts_df <- fread(data.table = F, input = "./Resources/Analysis_Results/bulk/expression/rna/other/preprocess/intersect_shRNA_lines_w_NT_lines_RNAseq/20220603.v1/Cell_Lines.gene_counts.20220603.v1.tsv")
colnames(counts_df)
# create a DGEList object -------------------------------------------------
# counts_mat <- as.matrix(counts_df[, colnames(counts_df)[grepl(pattern = "sample", x = colnames(counts_df))]])
counts_mat <- as.matrix(counts_df[, c("sample.caki_1_cp_c2_e1", "sample.caki_1_cp_c1_e1", "sample.caki_1_control_e1", "sample.rcc4_klf9_c2_e1", "sample.rcc4_mxi1_c2_e1",
"sample.rcc4_scrambled_e1", "sample.dr_caki_1_rna", "sample.skrc42+bap1_e1", "sample.skrc42+emptyvector_e1")])
# rownames(counts_mat) <- counts_df$ensembl_gene_id
dgList <- DGEList(counts=counts_mat, genes=counts_df[,colnames(counts_df)[!grepl(pattern = "sample", x = colnames(counts_df))]])
# Normalization -----------------------------------------------------------
countsPerMillion <- cpm(dgList); head(countsPerMillion)
dgList <- calcNormFactors(dgList, method="TMM")
countsPerMillion_tmm <- cpm(dgList); head(countsPerMillion_tmm)
countsPerMillion_tmm_log2 <- cpm(dgList, log = T); head(countsPerMillion_tmm_log2)
# add information ---------------------------------------------------------
countsPerMillion_tmm_df <- cbind(counts_df[,1:7], data.frame(countsPerMillion_tmm))
countsPerMillion_tmm_log2_df <- cbind(counts_df[,1:7], data.frame(countsPerMillion_tmm_log2))
# write output ------------------------------------------------------------
## set run id
version_tmp <- 1
run_id <- paste0(format(Sys.Date(), "%Y%m%d") , ".v", version_tmp)
## set output directory
source("./ccRCC_snRNA_analysis/functions.R")
dir_out <- paste0(makeOutDir(), run_id, "/")
## write output
file2write <- paste0(dir_out, "CPM.TMM_normalized.Manuscript_Cell_Lines.", run_id, ".tsv")
write.table(x = countsPerMillion_tmm_df, file = file2write, row.names = F, quote = F, sep = "\t")
file2write <- paste0(dir_out, "Log2CPM.TMM_normalized.All_Cell_Lines.", run_id, ".tsv")
write.table(x = countsPerMillion_tmm_log2_df, file = file2write, row.names = T, quote = F, sep = "\t")
# write output ------------------------------------------------------------
## set run id
version_tmp <- 1
run_id <- paste0(format(Sys.Date(), "%Y%m%d") , ".v", version_tmp)
## set output directory
source("./ccRCC_snRNA_analysis/functions.R")
dir_out <- paste0(makeOutDir(), run_id, "/")
dir.create(dir_out)
## write output
file2write <- paste0(dir_out, "CPM.TMM_normalized.Manuscript_Cell_Lines.", run_id, ".tsv")
write.table(x = countsPerMillion_tmm_df, file = file2write, row.names = F, quote = F, sep = "\t")
file2write <- paste0(dir_out, "Log2CPM.TMM_normalized.All_Cell_Lines.", run_id, ".tsv")
write.table(x = countsPerMillion_tmm_log2_df, file = file2write, row.names = T, quote = F, sep = "\t")
exp_df <- fread(input = "~/Library/CloudStorage/Box-Box/Ding_Lab/Projects_Current/RCC/ccRCC_snRNA/Resources/Analysis_Results/bulk/expression/rna/other/normalization/get_edgeR_TMM_normalized_counts_manuscriptselected_cell_lines/20220710.v1/CPM.TMM_normalized.Manuscript_Cell_Lines.20220710.v1.tsv", data.table = F)
gene_plot <- "CES3"
# format expression data --------------------------------------------------
colnames_id <- colnames(exp_df)[!grepl(x = colnames(exp_df), pattern = "sample")]
plot_data_long_df <- exp_df %>%
filter(external_gene_name %in% gene_plot) %>%
melt(id.vars = colnames_id) %>%
# filter(variable %in% c("sample.786_o.sglacz_e1", "sample.786_o.sgbap1_e1", "sample.skrc42.bap1_e1", "sample.skrc42.emptyvector_e1")) %>%
filter(variable %in% c("sample.skrc42.bap1_e1", "sample.skrc42.emptyvector_e1")) %>%
mutate(parental_line = str_split_fixed(string = variable, pattern = "\\.", n = 3)[,2]) %>%
mutate(parental_line_text = ifelse(parental_line == "786_o", "786-O", "SKRC-42")) %>%
mutate(BAP1_status = ifelse(variable %in% c("sample.786_o.sgbap1_e1", "sample.skrc42.emptyvector_e1"), "BAP1 null", "BAP1 wt"))
plot_data_long_df$sample_text <- as.vector(plot_data_long_df$variable)
plot_data_long_df$sample_text[plot_data_long_df$sample_text == "sample.786_o.sgbap1_e1"] <- "sgBAP1"
plot_data_long_df$sample_text[plot_data_long_df$sample_text == "sample.786_o.sglacz_e1"] <- "sgLacZ"
plot_data_long_df$sample_text[plot_data_long_df$sample_text == "sample.skrc42.bap1_e1"] <- "BAP1"
plot_data_long_df$sample_text[plot_data_long_df$sample_text == "sample.skrc42.emptyvector_e1"] <- "control"
plot_data_long_df$sample_text <- factor(x = plot_data_long_df$sample_text, levels = c("sgLacZ", "sgBAP1", "BAP1", "control"))
p <- ggplot()
p <- p + geom_col(data = plot_data_long_df, mapping = aes(x = sample_text, y = value, fill = BAP1_status), color = "black")
# p <- p + facet_wrap(.~parental_line_text, scales = "free_x")
p <- p + theme_classic()
p <- p + ylab(label = paste0(gene_plot, " expression (TPM)"))
p <- p + theme(strip.background = element_rect(fill = NA, color = NA),
panel.spacing = unit(0, "lines"))
p <- p + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, color = "black"), axis.text.y = element_text(color = "black"))
p <- p + theme(axis.title.x = element_blank(), axis.ticks.x = element_blank())
p
## set working directory to current file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## set working directory to current file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
for (gene_plot in c("BAP1", "CES3")) {
# format expression data --------------------------------------------------
colnames_id <- colnames(exp_df)[!grepl(x = colnames(exp_df), pattern = "sample")]
plot_data_long_df <- exp_df %>%
filter(external_gene_name %in% gene_plot) %>%
melt(id.vars = colnames_id) %>%
# filter(variable %in% c("sample.786_o.sglacz_e1", "sample.786_o.sgbap1_e1", "sample.skrc42.bap1_e1", "sample.skrc42.emptyvector_e1")) %>%
filter(variable %in% c("sample.skrc42.bap1_e1", "sample.skrc42.emptyvector_e1")) %>%
mutate(parental_line = str_split_fixed(string = variable, pattern = "\\.", n = 3)[,2]) %>%
mutate(parental_line_text = ifelse(parental_line == "786_o", "786-O", "SKRC-42")) %>%
mutate(BAP1_status = ifelse(variable %in% c("sample.786_o.sgbap1_e1", "sample.skrc42.emptyvector_e1"), "BAP1 null", "BAP1 wt"))
plot_data_long_df$sample_text <- as.vector(plot_data_long_df$variable)
plot_data_long_df$sample_text[plot_data_long_df$sample_text == "sample.786_o.sgbap1_e1"] <- "sgBAP1"
plot_data_long_df$sample_text[plot_data_long_df$sample_text == "sample.786_o.sglacz_e1"] <- "sgLacZ"
plot_data_long_df$sample_text[plot_data_long_df$sample_text == "sample.skrc42.bap1_e1"] <- "BAP1"
plot_data_long_df$sample_text[plot_data_long_df$sample_text == "sample.skrc42.emptyvector_e1"] <- "control"
plot_data_long_df$sample_text <- factor(x = plot_data_long_df$sample_text, levels = c("sgLacZ", "sgBAP1", "BAP1", "control"))
# make barplot ------------------------------------------------------------
p <- ggplot()
p <- p + geom_col(data = plot_data_long_df, mapping = aes(x = sample_text, y = value, fill = BAP1_status), color = "black")
p <- p + theme_classic()
p <- p + ylab(label = paste0(gene_plot, " expression (TPM)"))
p <- p + theme(strip.background = element_rect(fill = NA, color = NA),
panel.spacing = unit(0, "lines"))
p <- p + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, color = "black"), axis.text.y = element_text(color = "black"))
p <- p + theme(axis.title.x = element_blank(), axis.ticks.x = element_blank())
# write output ------------------------------------------------------------
file2write <- paste0(dir_out, "F7f_Barplot_", gene_plot, "_expression", ".pdf")
pdf(file2write, width = 2.1, height = 2, useDingbats = F)
print(p)
dev.off()
}
# preprocess --------------------------------------------------------------
dir_out <- paste0("../../outputs/"); dir.create(dir_out)
# plot ------------------------------------------------------
for (gene_plot in c("BAP1", "CES3")) {
# format expression data --------------------------------------------------
colnames_id <- colnames(exp_df)[!grepl(x = colnames(exp_df), pattern = "sample")]
plot_data_long_df <- exp_df %>%
filter(external_gene_name %in% gene_plot) %>%
melt(id.vars = colnames_id) %>%
# filter(variable %in% c("sample.786_o.sglacz_e1", "sample.786_o.sgbap1_e1", "sample.skrc42.bap1_e1", "sample.skrc42.emptyvector_e1")) %>%
filter(variable %in% c("sample.skrc42.bap1_e1", "sample.skrc42.emptyvector_e1")) %>%
mutate(parental_line = str_split_fixed(string = variable, pattern = "\\.", n = 3)[,2]) %>%
mutate(parental_line_text = ifelse(parental_line == "786_o", "786-O", "SKRC-42")) %>%
mutate(BAP1_status = ifelse(variable %in% c("sample.786_o.sgbap1_e1", "sample.skrc42.emptyvector_e1"), "BAP1 null", "BAP1 wt"))
plot_data_long_df$sample_text <- as.vector(plot_data_long_df$variable)
plot_data_long_df$sample_text[plot_data_long_df$sample_text == "sample.786_o.sgbap1_e1"] <- "sgBAP1"
plot_data_long_df$sample_text[plot_data_long_df$sample_text == "sample.786_o.sglacz_e1"] <- "sgLacZ"
plot_data_long_df$sample_text[plot_data_long_df$sample_text == "sample.skrc42.bap1_e1"] <- "BAP1"
plot_data_long_df$sample_text[plot_data_long_df$sample_text == "sample.skrc42.emptyvector_e1"] <- "control"
plot_data_long_df$sample_text <- factor(x = plot_data_long_df$sample_text, levels = c("sgLacZ", "sgBAP1", "BAP1", "control"))
# make barplot ------------------------------------------------------------
p <- ggplot()
p <- p + geom_col(data = plot_data_long_df, mapping = aes(x = sample_text, y = value, fill = BAP1_status), color = "black")
p <- p + theme_classic()
p <- p + ylab(label = paste0(gene_plot, " expression (TPM)"))
p <- p + theme(strip.background = element_rect(fill = NA, color = NA),
panel.spacing = unit(0, "lines"))
p <- p + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, color = "black"), axis.text.y = element_text(color = "black"))
p <- p + theme(axis.title.x = element_blank(), axis.ticks.x = element_blank())
# write output ------------------------------------------------------------
file2write <- paste0(dir_out, "F7f_Barplot_", gene_plot, "_expression", ".pdf")
pdf(file2write, width = 2.1, height = 2, useDingbats = F)
print(p)
dev.off()
}
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# input -------------------------------------------------------------------
exp_df <- fread(input = "../../data/CPM.TMM_normalized.Manuscript_Cell_Lines.20220710.v1.tsv.gz", data.table = F)
# specify parameters ------------------------------------------------------
colnames_value <- colnames(exp_df)[grepl(pattern = "sample", x = colnames(exp_df))]
exp_df <- as.data.table(exp_df)
genes_plot <- c("CP")
samples_plot <- c("caki_1_control_e1", "dr_caki_1_rna", "caki_1_cp_c2_e1", "caki_1_cp_c1_e1")
sampletext_plot <- c("caki1_nt1", "caki1_nt2", "caki1_cp_c2", "caki1_cp_c1")
sampletext_plot <- c("sh-NT1", "sh-NT2", "sh-CP-C2", "sh-CP-C1")
# make colors -------------------------------------------------------------
color_nt <- RColorBrewer::brewer.pal(n = 6, name = "Set3")[6]
color_cp <- RColorBrewer::brewer.pal(n = 6, name = "Set3")[5]
colors_bysample <- c(color_nt, color_nt, color_cp, color_cp)
names(colors_bysample) <- c("sh-NT1", "sh-NT2", "sh-CP-C2", "sh-CP-C1")
# format expression data --------------------------------------------------
plot_data_long_df <- exp_df %>%
filter(external_gene_name %in% genes_plot) %>%
melt.data.table(measure.vars = colnames_value) %>%
mutate(sample = gsub(x = variable, pattern = "sample\\.", replacement = "")) %>%
filter(sample %in% samples_plot)
plot_data_long_df$sample_text <- mapvalues(x = plot_data_long_df$sample, from = samples_plot, to = sampletext_plot)
plot_data_long_df$sample_text <- factor(x = plot_data_long_df$sample_text, levels = rev(sampletext_plot))
# plot --------------------------------------------------------------------
p <- ggplot()
p <- p + geom_col(data = plot_data_long_df, mapping = aes(x = value, y = sample_text, fill = sample_text), position=position_dodge(), color = "black")
p <- p + scale_fill_manual(values = colors_bysample)
p <- p + theme_classic()
p <- p + xlab(label = paste0(genes_plot, " gene CPM"))
p <- p + theme(axis.text = element_text(size = 15, color = "black"))
p <- p + theme(axis.title.y = element_blank(), axis.title.x = element_text(size = 15),
axis.ticks.y = element_blank(), legend.position = "none")
file2write <- paste0(dir_out, paste0(genes_plot, collapse = "_"), ".bulkRNA.CPM.", "pdf")
pdf(file2write, width = 2.5, height = 1.4, useDingbats = F)
print(p)
dev.off()
## save plot
dir_out <- paste0("../../outputs/"); dir.create(dir_out)
file2write <- paste0(dir_out,"F2b_Barplot_CP_Expression.pdf")
pdf(file2write, width = 2.5, height = 1.4, useDingbats = F)
print(p)
dev.off()
View(plot_data_long_df)
seq(0, 12, 4)
dir_out <- paste0("../../outputs/"); dir.create(dir_out)
file2write <- paste0(dir_out,"F2b_Barplot_CP_Expression.pdf")
pdf(file2write, width = 2.5, height = 1.4, useDingbats = F)
print(p)
dev.off()
p <- ggplot()
p <- p + geom_col(data = plot_data_long_df, mapping = aes(x = value, y = sample_text, fill = sample_text), position=position_dodge(), color = "black")
p <- p + scale_fill_manual(values = colors_bysample)
p <- p + scale_x_continuous(breaks = seq(0, 12, 4), labels = seq(0, 12, 4))
p <- p + theme_classic()
p <- p + xlab(label = paste0(genes_plot, " gene CPM"))
p <- p + theme(axis.text = element_text(size = 15, color = "black"))
p <- p + theme(axis.title.y = element_blank(), axis.title.x = element_text(size = 15),
axis.ticks.y = element_blank(), legend.position = "none")
## save plot
dir_out <- paste0("../../outputs/"); dir.create(dir_out)
file2write <- paste0(dir_out,"F2b_Barplot_CP_Expression.pdf")
pdf(file2write, width = 2.5, height = 1.4, useDingbats = F)
print(p)
dev.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# input -------------------------------------------------------------------
exp_df <- fread(input = "../../data/CPM.TMM_normalized.Manuscript_Cell_Lines.20220710.v1.tsv.gz", data.table = F)
# specify parameters ------------------------------------------------------
colnames_value <- colnames(exp_df)[grepl(pattern = "sample", x = colnames(exp_df))]
exp_df <- as.data.table(exp_df)
# genes_plot <- c("KLF9", "CP")
# genes_plot <- c("CP")
genes_plot <- c("COL4A1", "OSMR", "TGM2")
samples_plot <- c("caki_1_control_e1", "dr_caki_1_rna", "caki_1_cp_c2_e1", "caki_1_cp_c1_e1")
sampletext_plot <- c("caki1_nt1", "caki1_nt2", "caki1_cp_c2", "caki1_cp_c1")
sampletext_plot <- c("sh-NT1", "sh-NT2", "sh-CP-C2", "sh-CP-C1")
# make colors -------------------------------------------------------------
color_nt <- RColorBrewer::brewer.pal(n = 6, name = "Set3")[6]
color_cp <- RColorBrewer::brewer.pal(n = 6, name = "Set3")[5]
colors_bysample <- c(color_nt, color_nt, color_cp, color_cp)
names(colors_bysample) <- c("sh-NT1", "sh-NT2", "sh-CP-C2", "sh-CP-C1")
# format expression data --------------------------------------------------
plot_data_long_df <- exp_df %>%
filter(external_gene_name %in% genes_plot) %>%
melt.data.table(measure.vars = colnames_value) %>%
mutate(sample = gsub(x = variable, pattern = "sample\\.", replacement = "")) %>%
filter(sample %in% samples_plot)
plot_data_long_df$sample_text <- mapvalues(x = plot_data_long_df$sample, from = samples_plot, to = sampletext_plot)
plot_data_long_df$sample_text <- factor(x = plot_data_long_df$sample_text, levels = rev(sampletext_plot))
# plot --------------------------------------------------------------------
p <- ggplot()
p <- p + geom_col(data = plot_data_long_df, mapping = aes(x = value, y = sample_text, fill = sample_text), position=position_dodge(), color = "black")
p <- p + scale_fill_manual(values = colors_bysample)
p <- p + facet_wrap(.~external_gene_name, scales = "free_x")
p <- p + theme_classic()
p <- p + xlab(label = paste0("CPM"))
p <- p + theme(axis.text.x = element_text(size = 15, color = "black"), axis.text.y = element_text(size = 17, color = "black"))
p <- p + theme(axis.title.y = element_blank(), axis.title.x = element_text(size = 15), strip.text = element_text(size = 17),
axis.ticks.y = element_blank(), legend.position = "none")
p
## save plot
dir_out <- paste0("../../outputs/"); dir.create(dir_out)
file2write <- paste0(dir_out,"F2e_Barplot_COL4A1_OSMR_TGM2_Expression.pdf")
pdf(file2write, width = 6, height = 2, useDingbats = F)
print(p)
dev.off()
