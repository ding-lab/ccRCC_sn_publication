group_by(barcode) %>%
summarize(count_feature = n()) %>%
filter(count_feature >= 2) %>%
nrow()
values_matrix
values_matrix[sort(values_matrix[,3]),]
sort(values_matrix[,3])
values_matrix[order(values_matrix[,3]),]
values_matrix[order(values_matrix[,3], decreasing = T),]
values_matrix[,3] <- as.numeric(values_matrix[,3])
values_matrix
U_stat[unique(values_matrix[,1])] <- 0
U_stat <- rep(0, length(unique(values_matrix[,1])))
V <- values_matrix %>%
as.data.table() %>%
group_by(barcode) %>%
summarize(counts = sum(count)) %>%
filter(count >= 5) %>%
nrow()
# Write your code here
values_matrix <- str_split_fixed(string = values, pattern = "\t", n = 3)
colnames(values_matrix) <- c("barcode", "feature", "count")
values_matrix <- values_matrix[order(values_matrix[,3], decreasing = T),]
values_matrix[,3] <- as.numeric(values_matrix[,3])
V <- values_matrix %>%
as.data.table() %>%
group_by(barcode) %>%
summarize(counts = sum(count)) %>%
filter(count >= 5) %>%
nrow()
values_matrix
values_matrix[,"count"] <- as.numeric(values_matrix[,"count"])
values_matrix
values_matrix[,"count"]
as.numeric(values_matrix[,"count"])
values_matrix[,"count"] <- as.numeric(values_matrix[,"count"])
values_matrix
values_matrix %>%
as.data.table()
values_matrix %>%
as.data.table() %>%
group_by(barcode) %>%
summarize(counts = sum(count)) %>%
filter(count >= 5) %>%
nrow()
V <- values_matrix %>%
as.data.table() %>%
mutate(count = as.numeric(count)) %>%
group_by(barcode) %>%
summarize(counts = sum(count)) %>%
filter(count >= 5) %>%
nrow()
values_matrix %>%
as.data.table() %>%
mutate(count = as.numeric(count)) %>%
group_by(barcode) %>%
summarize(counts = sum(count))
V <- values_matrix %>%
as.data.table() %>%
mutate(count = as.numeric(count)) %>%
group_by(barcode) %>%
summarize(counts = sum(count)) %>%
filter(counts >= 5) %>%
nrow()
Y <- values_matrix %>%
as.data.table() %>%
mutate(count = as.numeric(count)) %>%
group_by(barcode, feature) %>%
summarize(counts = sum(count)) %>%
filter(counts >= 2) %>%
group_by(barcode) %>%
summarize(features = n()) %>%
filter(features >= 2) %>%
nrow()
Y
values_matrix %>%
as.data.table() %>%
mutate(count = as.numeric(count)) %>%
group_by(barcode, feature) %>%
summarize(counts = sum(count)) %>%
filter(counts >= 2)
Y <- values_matrix %>%
as.data.table() %>%
mutate(count = as.numeric(count)) %>%
group_by(barcode, feature) %>%
summarize(counts = sum(count)) %>%
filter(counts >= 2) %>%
group_by(barcode) %>%
summarize(features = n()) %>%
filter(features >= 3) %>%
nrow()
Y
values <- c("TAA\tGES09\t4", "TTG\tGES10\t13", "CTT\tGES07\t4", "TCT\tGES04\t6" )
# Write your code here
values_matrix <- str_split_fixed(string = values, pattern = "\t", n = 3)
values_matrix
values_matrix %>%
as.data.table() %>%
mutate(count = as.numeric(count))
colnames(values_matrix) <- c("barcode", "feature", "count")
values_matrix %>%
as.data.table() %>%
mutate(count = as.numeric(count))
values_matrix %>%
as.data.table() %>%
mutate(count = as.numeric(count)) %>%
group_by(barcode) %>%
summarize(counts = sum(count))
library(readxl)
input_df <- read_xls(path = "~/Desktop/example_input.xlsx")
input_df <- read_xlsx(path = "~/Desktop/example_input.xlsx")
View(input_df)
input_df <- read_xlsx(path = "~/Desktop/example_input.xlsx", col_names = c("Chromosome", "Position", "Ref", "Depth", "Bases", "Quality"))
gsub(x = input_df$Bases[1], pattern = "\\.|\\,", replacement = "")
strsplit(x = input_df$Bases[14], split = '\\+[0-9]')[[1]]
strsplit(x = input_df$Bases[14], split = '\\+\\d')[[1]]
strsplit(x = input_df$Bases[14], split = '\\+\d+')[[1]]
strsplit(x = input_df$Bases[14], split = '\\+[1-9]+')[[1]]
string_tmp1 <- strsplit(x = input_df$Bases[14], split = '\\+[1-9]+')[[1]]
gsub(x = string_tmp1, pattern = "\\.|\\,", replacement = "")
string_tmp2 <- gsub(x = string_tmp1, pattern = "\\.|\\,", replacement = "")
string_tmp2 <- string_tmp2[string_tmp2!=""]
string_tmp1 <- strsplit(x = input_df$Bases[1], split = '\\+[1-9]+')[[1]]
string_tmp2 <- gsub(x = string_tmp1, pattern = "\\.|\\,", replacement = "")
string_tmp2 <- string_tmp2[string_tmp2!=""]
string_tmp2
lapply(input_df$Bases, FUN = function(bases) {
string_tmp1 <- strsplit(x = bases, split = '\\+[1-9]+')[[1]]
string_tmp2 <- gsub(x = string_tmp1, pattern = "\\.|\\,", replacement = "")
string_tmp2 <- string_tmp2[string_tmp2!=""]
depth_alt <- length(string_tmp2)
alt <- unique(string_tmp2)
})
lapply(input_df$Bases, FUN = function(bases) {
string_tmp1 <- strsplit(x = bases, split = '\\+[1-9]+')[[1]]
string_tmp2 <- gsub(x = string_tmp1, pattern = "\\.|\\,", replacement = "")
string_tmp2 <- string_tmp2[string_tmp2!=""]
depth_alt <- length(string_tmp2)
alt <- unique(string_tmp2)
result <- c(alt, depth_alt)
return(result)
})
lapply(input_df$Bases[grepl(pattern = '[ATGC]', x = input_df$Bases)], FUN = function(bases) {
string_tmp1 <- strsplit(x = bases, split = '\\+[1-9]+')[[1]]
string_tmp2 <- gsub(x = string_tmp1, pattern = "\\.|\\,", replacement = "")
string_tmp2 <- string_tmp2[string_tmp2!=""]
depth_alt <- length(string_tmp2)
alt <- unique(string_tmp2)
result <- c(alt, depth_alt)
return(result)
})
string_tmp1 <- strsplit(x = input_df$Bases[1], split = '\\+[1-9]+')[[1]]
string_tmp2 <- gsub(x = string_tmp1, pattern = "\\.|\\,", replacement = "")
string_tmp2 <- string_tmp2[string_tmp2!=""]
string_tmp2
string_tmp1 <- strsplit(x = input_df$Bases[1], split = '\\+[1-9]+')[[1]]
string_tmp1
string_tmp2 <- gsub(x = string_tmp1, pattern = "\\.|\\,", replacement = "")
strsplit(x = string_tmp2, split = "")[[1]]
lapply(input_df$Bases[grepl(pattern = '[ATGC]', x = input_df$Bases)], FUN = function(bases) {
if (grepl(pattern = "\\+|\\-")) {
string_tmp1 <- strsplit(x = bases, split = '\\+[1-9]+')[[1]]
string_tmp2 <- gsub(x = string_tmp1, pattern = "\\.|\\,", replacement = "")
string_tmp2 <- string_tmp2[string_tmp2!=""]
} else {
string_tmp1 <- strsplit(x = bases, split = '\\+[1-9]+')[[1]]
string_tmp2 <- gsub(x = string_tmp1, pattern = "\\.|\\,", replacement = "")
string_tmp2 <- strsplit(x = toupper(string_tmp2), split = "")[[1]]
}
depth_alt <- length(string_tmp2)
alt <- unique(string_tmp2)
result <- c(alt, depth_alt)
return(result)
})
string_tmp2 <- strsplit(x = toupper(string_tmp2), split = "")[[1]]
string_tmp2
lapply(input_df$Bases[grepl(pattern = '[ATGC]', x = input_df$Bases)], FUN = function(bases) {
if (grepl(pattern = "\\+|\\-", x = bases)) {
string_tmp1 <- strsplit(x = bases, split = '\\+[1-9]+')[[1]]
string_tmp2 <- gsub(x = string_tmp1, pattern = "\\.|\\,", replacement = "")
string_tmp2 <- string_tmp2[string_tmp2!=""]
} else {
string_tmp1 <- strsplit(x = bases, split = '\\+[1-9]+')[[1]]
string_tmp2 <- gsub(x = string_tmp1, pattern = "\\.|\\,", replacement = "")
string_tmp2 <- strsplit(x = toupper(string_tmp2), split = "")[[1]]
}
depth_alt <- length(string_tmp2)
alt <- unique(string_tmp2)
result <- c(alt, depth_alt)
return(result)
})
result_list <- lapply(input_filtered_df, FUN = function(bases) {
if (grepl(pattern = "\\+|\\-", x = bases)) {
string_tmp1 <- strsplit(x = bases, split = '\\+[1-9]+')[[1]]
string_tmp2 <- gsub(x = string_tmp1, pattern = "\\.|\\,", replacement = "")
string_tmp2 <- string_tmp2[string_tmp2!=""]
} else {
string_tmp1 <- strsplit(x = bases, split = '\\+[1-9]+')[[1]]
string_tmp2 <- gsub(x = string_tmp1, pattern = "\\.|\\,", replacement = "")
string_tmp2 <- strsplit(x = toupper(string_tmp2), split = "")[[1]]
}
depth_alt <- length(string_tmp2)
alt <- unique(string_tmp2)
result <- c(alt, depth_alt)
return(result)
})
input_filtered_df <- input_df[grepl(pattern = '[ATGC]', x = input_df$Bases),]
result_list <- lapply(input_filtered_df, FUN = function(bases) {
if (grepl(pattern = "\\+|\\-", x = bases)) {
string_tmp1 <- strsplit(x = bases, split = '\\+[1-9]+')[[1]]
string_tmp2 <- gsub(x = string_tmp1, pattern = "\\.|\\,", replacement = "")
string_tmp2 <- string_tmp2[string_tmp2!=""]
} else {
string_tmp1 <- strsplit(x = bases, split = '\\+[1-9]+')[[1]]
string_tmp2 <- gsub(x = string_tmp1, pattern = "\\.|\\,", replacement = "")
string_tmp2 <- strsplit(x = toupper(string_tmp2), split = "")[[1]]
}
depth_alt <- length(string_tmp2)
alt <- unique(string_tmp2)
result <- c(alt, depth_alt)
return(result)
})
View(input_filtered_df)
result_list
# Manuscript:   Epigenetic and transcriptomic characterization reveals progression markers and essential pathways in clear cell renal cell carcinoma
# Author:       Yige Wu
# Description:  Bubble plot showing the pathways over-represented in genes up-regulated (top) and down-regulated (bottom) in ccRCC cells compared to the PT cells
# Section:      Results - Transcription factors mediating glycolytic genes in ccRCC cells
#=======================================================================================
# Load libraries  and set working directory  -----------------------------------
## load libraries
packages = c(
"data.table",
"stringr",
"plyr",
"dplyr",
"ggplot2",
"ggrepel",
"RColorBrewer"
)
for (pkg_name_tmp in packages) {
if (!(pkg_name_tmp %in% installed.packages()[,1])) {
install.packages(pkg_name_tmp, dependencies = T)
}
if (!(pkg_name_tmp %in% installed.packages()[,1])) {
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install(pkg_name_tmp)
}
library(package = pkg_name_tmp, character.only = T)
}
## set working directory to current file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# set plotting parameters -----------------------------------------
pathways_selected <- c("HALLMARK_HYPOXIA", "HALLMARK_GLYCOLYSIS", "WP_GLUCOCORTICOID_RECEPTOR_PATHWAY", "KEGG_RNA_DEGRADATION",  "REACTOME_SLC_TRANSPORTER_DISORDERS")
pathway_label_df <- data.frame(Description = pathways_selected,
pathway_label = c("Hypoxia", "Glycolysis", "Glucocorticoid receptor pathway", "RNA degradation", "SLC transporter disorder"))
# make plot data ----------------------------------------------------------
## input data
enricher_out_df <- fread(data.table = F, input = "../../data/ORA_tumorcells_vs_pt.up_degs.tsv.gz")
## format data
plotdata_df <- enricher_out_df %>%
filter(Description %in% pathways_selected) %>%
mutate(size_plot = Count) %>%
mutate(x_plot = (size_plot/768)*100) %>%
mutate(log10FDR = -log10(p.adjust))
plotdata_df$y_plot <- mapvalues(x = plotdata_df$Description, from = pathway_label_df$Description, to = as.vector(pathway_label_df$pathway_label))
plotdata_df <- plotdata_df %>%
arrange(x_plot) %>%
select(x_plot, y_plot, size_plot, log10FDR)
## save plot data
write.table(x = plotdata_df, file = "../../plot_data/F3c.UpDEGs.SourceData.tsv", quote = F, sep = "\t", row.names = F)
# input plot data ---------------------------------------------------------
plotdata_df <- fread(data.table = F, input = "../../plot_data/F3c.UpDEGs.SourceData.tsv")
# plot enrichment map -----------------------------------------------------
plotdata_df$y_plot <- factor(x = plotdata_df$y_plot, levels = plotdata_df$y_plot)
p <- ggplot()
p <- p + geom_point(data = plotdata_df, mapping = aes(x = x_plot, y = y_plot, size = size_plot, color = log10FDR))
p <- p + scale_color_gradientn(colors = c("blue", "purple", "red"), breaks = c(2, 4, 6), guide = guide_colourbar(direction = "horizontal", title = NULL))
p <- p + scale_size_continuous(limits = c(0, 40), breaks = c(10, 20, 30, 40), guide = guide_legend(direction = "horizontal", title = NULL, nrow = 2, byrow = T))
p <- p + theme_light(base_size = 12)
p <- p + xlab(label = "Gene ratio (%)")
p <- p + theme(axis.text = element_text(color = "black"),
axis.title.y = element_blank(), axis.title.x = element_text(size = 10),
legend.position = "right", legend.box = "vertical")
# write output ------------------------------------------------------------
dir_out <- paste0("../../outputs/"); dir.create(dir_out)
file2write <- paste0(dir_out,"F3c.Dotplot.ORA_up_DEGs_tumorcells_vs_pt", ".pdf")
pdf(file2write, width = 4.5, height = 1.4, useDingbats = F)
print(p)
dev.off()
#=======================================================================================
# Load libraries  and set working directory  -----------------------------------
## load libraries
packages = c(
"data.table",
"stringr",
"plyr",
"dplyr",
"xlsx"
)
for (pkg_name_tmp in packages) {
if (!(pkg_name_tmp %in% installed.packages()[,1])) {
install.packages(pkg_name_tmp, dependencies = T)
}
if (!(pkg_name_tmp %in% installed.packages()[,1])) {
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install(pkg_name_tmp)
}
library(package = pkg_name_tmp, character.only = T)
}
# get all file names ------------------------------------------------------
list.files(path = "../../plot_data/")
# get all file names ------------------------------------------------------
filenames_process <- list.files(path = "../../plot_data/")
# get all file names ------------------------------------------------------
xlsx_filename <- "Source_Data.020223.xlsx"
filename_tmp
filenames_process <- list.files(path = "../../plot_data/")
filename_tmp <- filenames_process[1]
filename_tmp
sheetname_tmp <- gsub(x = filename_tmp, pattern = "\\.SourceData\\.tsv", replacement = "")
sheetname_tmp
xlsx_filename <- "Source_Data.020223.xlsx"
filenames_process <- list.files(path = "../../plot_data/")
for (filename_tmp in filenames_process) {
dataframe_tmp <- fread(data.table = F, input = paste0("../../plot_data/", filename_tmp))
sheetname_tmp <- gsub(x = filename_tmp, pattern = "\\.SourceData\\.tsv", replacement = "")
write.xlsx(dataframe_tmp, file = xlsx_filename, sheetName = sheetname_tmp, append=TRUE, row.names=FALSE)
}
# get all file names ------------------------------------------------------
library(xlsx)
remove.packages("xlsx")
#=======================================================================================
# Load libraries  and set working directory  -----------------------------------
## load libraries
packages = c(
"data.table",
"stringr",
"plyr",
"dplyr",
"xlsx"
)
for (pkg_name_tmp in packages) {
if (!(pkg_name_tmp %in% installed.packages()[,1])) {
install.packages(pkg_name_tmp, dependencies = T)
}
if (!(pkg_name_tmp %in% installed.packages()[,1])) {
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install(pkg_name_tmp)
}
library(package = pkg_name_tmp, character.only = T)
}
remove.packages("xlsx")
#=======================================================================================
# Load libraries  and set working directory  -----------------------------------
## load libraries
packages = c(
"data.table",
"stringr",
"plyr",
"dplyr",
"xlsx"
)
for (pkg_name_tmp in packages) {
if (!(pkg_name_tmp %in% installed.packages()[,1])) {
install.packages(pkg_name_tmp, dependencies = T)
}
if (!(pkg_name_tmp %in% installed.packages()[,1])) {
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install(pkg_name_tmp)
}
library(package = pkg_name_tmp, character.only = T)
}
xlsx_filename <- "Source_Data.020223.xlsx"
filenames_process <- list.files(path = "../../plot_data/")
for (filename_tmp in filenames_process) {
dataframe_tmp <- fread(data.table = F, input = paste0("../../plot_data/", filename_tmp))
sheetname_tmp <- gsub(x = filename_tmp, pattern = "\\.SourceData\\.tsv", replacement = "")
write.xlsx(dataframe_tmp, file = xlsx_filename, sheetName = sheetname_tmp, append=TRUE, row.names=FALSE)
}
xlsx_filename <- "../../../202301_Nat_Comm/Source_Data/Source_Data.020223.xlsx"
filenames_process <- list.files(path = "../../plot_data/")
for (filename_tmp in filenames_process) {
dataframe_tmp <- fread(data.table = F, input = paste0("../../plot_data/", filename_tmp))
sheetname_tmp <- gsub(x = filename_tmp, pattern = "\\.SourceData\\.tsv", replacement = "")
write.xlsx(dataframe_tmp, file = xlsx_filename, sheetName = sheetname_tmp, append=TRUE, row.names=FALSE)
}
filename_tmp
xlsx_filename <- "../../../202301_Nat_Comm/Source_Data/Source_Data.020223.xlsx"
filenames_process <- list.files(path = "../../plot_data/")
for (filename_tmp in filenames_process[1]) {
dataframe_tmp <- fread(data.table = F, input = paste0("../../plot_data/", filename_tmp))
sheetname_tmp <- gsub(x = filename_tmp, pattern = "\\.SourceData\\.tsv", replacement = "")
write.xlsx(dataframe_tmp, file = xlsx_filename, sheetName = sheetname_tmp, append=TRUE, row.names=FALSE)
}
View(dataframe_tmp)
sheetname_tmp
xlsx_filename <- "../../../202301_Nat_Comm/Source_Data/Source_Data.020223.xlsx"
filenames_process <- list.files(path = "../../plot_data/")
# Create a blank workbook
OUT <- createWorkbook()
for (filename_tmp in filenames_process[1:3]) {
dataframe_tmp <- fread(data.table = F, input = paste0("../../plot_data/", filename_tmp))
sheetname_tmp <- gsub(x = filename_tmp, pattern = "\\.SourceData\\.tsv", replacement = "")
# Add some sheets to the workbook
addWorksheet(OUT, sheetname_tmp)
# Write the data to the sheets
writeData(OUT, sheet = sheetname_tmp, x = dataframe_tmp)
# write.xlsx(dataframe_tmp, file = xlsx_filename, sheetName = sheetname_tmp, append=TRUE, row.names=FALSE)
}
#=======================================================================================
# Load libraries  and set working directory  -----------------------------------
## load libraries
packages = c(
"data.table",
"stringr",
"plyr",
"dplyr",
"xlsx"
)
for (pkg_name_tmp in packages) {
if (!(pkg_name_tmp %in% installed.packages()[,1])) {
install.packages(pkg_name_tmp, dependencies = T)
}
if (!(pkg_name_tmp %in% installed.packages()[,1])) {
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install(pkg_name_tmp)
}
library(package = pkg_name_tmp, character.only = T)
}
#=======================================================================================
# Load libraries  and set working directory  -----------------------------------
## load libraries
packages = c(
"data.table",
"stringr",
"plyr",
"dplyr",
"xlsx",
"openxlsx"
)
for (pkg_name_tmp in packages) {
if (!(pkg_name_tmp %in% installed.packages()[,1])) {
install.packages(pkg_name_tmp, dependencies = T)
}
if (!(pkg_name_tmp %in% installed.packages()[,1])) {
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install(pkg_name_tmp)
}
library(package = pkg_name_tmp, character.only = T)
}
OUT <- createWorkbook()
for (filename_tmp in filenames_process[1:3]) {
dataframe_tmp <- fread(data.table = F, input = paste0("../../plot_data/", filename_tmp))
sheetname_tmp <- gsub(x = filename_tmp, pattern = "\\.SourceData\\.tsv", replacement = "")
# Add some sheets to the workbook
addWorksheet(OUT, sheetname_tmp)
# Write the data to the sheets
writeData(OUT, sheet = sheetname_tmp, x = dataframe_tmp)
# write.xlsx(dataframe_tmp, file = xlsx_filename, sheetName = sheetname_tmp, append=TRUE, row.names=FALSE)
}
# Export the file
saveWorkbook(OUT, xlsx_filename)
xlsx_filename <- "../../../202301_Nat_Comm/Source_Data/Source_Data.020223.xlsx"
filenames_process <- list.files(path = "../../plot_data/")
# Create a blank workbook
OUT <- createWorkbook()
for (filename_tmp in filenames_process[1:3]) {
dataframe_tmp <- fread(data.table = F, input = paste0("../../plot_data/", filename_tmp))
sheetname_tmp <- gsub(x = filename_tmp, pattern = "\\.SourceData\\.tsv", replacement = "")
# Add some sheets to the workbook
addWorksheet(OUT, sheetname_tmp)
# Write the data to the sheets
writeData(OUT, sheet = sheetname_tmp, x = dataframe_tmp)
# write.xlsx(dataframe_tmp, file = xlsx_filename, sheetName = sheetname_tmp, append=TRUE, row.names=FALSE)
}
# Export the file
saveWorkbook(OUT, xlsx_filename)
xlsx_filename <- "../../../202301_Nat_Comm/Source_Data/Source_Data.nonWB.020223.xlsx"
filenames_process <- list.files(path = "../../plot_data/")
# Create a blank workbook
OUT <- createWorkbook()
for (filename_tmp in filenames_process) {
dataframe_tmp <- fread(data.table = F, input = paste0("../../plot_data/", filename_tmp))
sheetname_tmp <- gsub(x = filename_tmp, pattern = "\\.SourceData\\.tsv", replacement = "")
# Add some sheets to the workbook
addWorksheet(OUT, sheetname_tmp)
# Write the data to the sheets
writeData(OUT, sheet = sheetname_tmp, x = dataframe_tmp)
# write.xlsx(dataframe_tmp, file = xlsx_filename, sheetName = sheetname_tmp, append=TRUE, row.names=FALSE)
}
xlsx_filename <- "../../../202301_Nat_Comm/Source_Data/Source_Data.nonWB.020223.xlsx"
filenames_process <- list.files(path = "../../plot_data/")
# Create a blank workbook
OUT <- createWorkbook()
for (filename_tmp in filenames_process) {
dataframe_tmp <- fread(data.table = F, input = paste0("../../plot_data/", filename_tmp))
sheetname_tmp <- gsub(x = filename_tmp, pattern = "\\.SourceData\\.tsv", replacement = "")
# Add some sheets to the workbook
addWorksheet(OUT, sheetname_tmp)
# Write the data to the sheets
writeData(OUT, sheet = sheetname_tmp, x = dataframe_tmp)
# write.xlsx(dataframe_tmp, file = xlsx_filename, sheetName = sheetname_tmp, append=TRUE, row.names=FALSE)
}
# Export the file
saveWorkbook(OUT, xlsx_filename)
